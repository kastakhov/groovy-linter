name: GroovyLinter

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'dev/**'
  pull_request:
    branches:
      - main
      - 'dev/**'

permissions:
  issues: write
  pull-requests: write
  contents: read
  repository-projects: read
  statuses: read

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  npm-groovy-lint:
    runs-on: ubuntu-latest
    container:
      image: nvuillam/npm-groovy-lint

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Run npm-groovy-lint
        id: lint_result
        continue-on-error: true
        shell: bash
        run: |
          # Runnung linter and save result as json
          # we ingore the exit code of the linter and save it as variable
          # as we want to show the violated rules when the linter fails
          lint_result_file="result-$(echo ${GITHUB_SHA} | cut -c1-8).json"
          lint_exit_code=0

          npm-groovy-lint --ignorepattern "**/.placeholder" --output ./${lint_result_file} "pipelines/**/*" "pipelines/*" || lint_exit_code=1

          # Result doesn't have newline at the end, so add with sed
          {
            echo 'LINT_RESULT<<EOF'
            sed -e '$a\' ${lint_result_file}
            echo EOF
          } >> "$GITHUB_OUTPUT"
          echo "LINT_RESULT_FILE=${lint_result_file}" >> $GITHUB_OUTPUT
          echo "LINT_EXIT_CODE=$lint_exit_code" >> $GITHUB_ENV

      - name: Populate lintian exit code
        shell: bash
        run: |
          # Exit with linter exit code
          exit ${{ env.LINT_EXIT_CODE }}

      - name: Archive result.json
        if: success() || failure()
        id: result-upload
        uses: actions/upload-artifact@v4
        with:
          name: GroovyLinter
          path: |
            ${{ steps.lint_result.outputs.LINT_RESULT_FILE }}

      - name: Show violated rules
        if: failure()
        run: |
          # Show violated rules
          echo "The following rules are violated:"
          echo "${{ toJSON(fromJSON(steps.lint_result.outputs.LINT_RESULT).summary.detectedRules) }}"

      - name: Comment on PR
        if: github.event_name == 'pull_request' && !cancelled()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          script: |
            const workflow_name = '${{ github.workflow }}';
            const workflow_url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const artifact_url = '${{ steps.result-upload.outputs.artifact-url }}';
            const pr_number = '${{ github.event.pull_request.number }}';
            const job_status = '${{ job.status }}';

            const success = job_status === 'success';

            let lint_result = `${{ toJSON(fromJSON(steps.lint_result.outputs.LINT_RESULT).summary) }}`;
            // Remove newline symbols from the json
            lint_result = lint_result.replace(/(?:\r\n|\r|\n)/g, '');
            // Remove first quote and last quote symbols
            lint_result = lint_result.replace(/^"/, '');
            lint_result = lint_result.replace(/"$/, '');
            lint_result = JSON.parse(lint_result);

            let body = `### ${success ? '✅' : '❌'} ${workflow_name}: ${success ? 'succeeded' : 'failed'}\n`;
            body += '\n';
            body += `➡️ [Open workflow job](${workflow_url})\n`;
            body += `➡️ [Download job result](${artifact_url})\n`;
            body += '\n';
            if (!success ) {
              body += '### ❗️ Violated Rules:\n';
              const violated_rules = lint_result.detectedRules;
              for (let rule in violated_rules) {
                body += `- **${rule}** violated **${violated_rules[rule]}** time(s)\n`;
              }
              body += '\n';
              body += 'Check the job result for more details\n';
            }

            await github.rest.issues.createComment({
              issue_number: pr_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
